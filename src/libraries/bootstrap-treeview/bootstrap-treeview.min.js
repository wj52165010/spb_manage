/* eslint-disable */
! function (a, b, c, d) {
  "use strict";
  var e = "treeview",
    f = {};
  f.settings = {
    injectStyle: !0,
    levels: 2,
    expandIcon: "fa fa-plus",
    collapseIcon: "fa fa-minus",
    emptyIcon: "glyphicon",
    nodeIcon: "",
    selectedIcon: "",
    checkedIcon: "glyphicon glyphicon-check",
    uncheckedIcon: "glyphicon glyphicon-unchecked",
    color: d,
    backColor: d,
    borderColor: d,
    onhoverColor: "#F5F5F5",
    selectedColor: "#FFFFFF",
    selectedBackColor: "#428bca",
    searchResultColor: "#D9534F",
    searchResultBackColor: d,
    enableLinks: !1,
    highlightSelected: !0,
    highlightSearchResults: !0,
    showBorder: !0,
    showIcon: !0,
    showCheckbox: !1,
    showTags: !1,
    multiSelect: !1,
    onNodeChecked: d,
    onNodeCollapsed: d,
    onNodeDisabled: d,
    onNodeEnabled: d,
    onNodeExpanded: d,
    onNodeSelected: d,
    onNodeUnchecked: d,
    onNodeUnselected: d,
    onSearchComplete: d,
    onSearchCleared: d
  }, f.options = {
    silent: !1,
    ignoreChildren: !1
  }, f.searchOptions = {
    ignoreCase: !0,
    exactMatch: !1,
    revealResults: !0
  };
  var g = function (b, c) {
    return this.$element = a(b), this.elementId = b.id, this.styleId = this.elementId + "-style", this.init(c), {
      options: this.options,
      init: a.proxy(this.init, this),
      remove: a.proxy(this.remove, this),
      getNode: a.proxy(this.getNode, this),
      getParent: a.proxy(this.getParent, this),
      getSiblings: a.proxy(this.getSiblings, this),
      getSelected: a.proxy(this.getSelected, this),
      getUnselected: a.proxy(this.getUnselected, this),
      findNodes: a.proxy(this.c_findNodes, this),
      getExpanded: a.proxy(this.getExpanded, this),
      getCollapsed: a.proxy(this.getCollapsed, this),
      getChecked: a.proxy(this.getChecked, this),
      getUnchecked: a.proxy(this.getUnchecked, this),
      getDisabled: a.proxy(this.getDisabled, this),
      getEnabled: a.proxy(this.getEnabled, this),
      selectNode: a.proxy(this.selectNode, this),
      unselectNode: a.proxy(this.unselectNode, this),
      toggleNodeSelected: a.proxy(this.toggleNodeSelected, this),
      collapseAll: a.proxy(this.collapseAll, this),
      collapseNode: a.proxy(this.collapseNode, this),
      expandAll: a.proxy(this.expandAll, this),
      expandNode: a.proxy(this.expandNode, this),
      toggleNodeExpanded: a.proxy(this.toggleNodeExpanded, this),
      revealNode: a.proxy(this.revealNode, this),
      checkAll: a.proxy(this.checkAll, this),
      checkNode: a.proxy(this.checkNode, this),
      uncheckAll: a.proxy(this.uncheckAll, this),
      uncheckNode: a.proxy(this.uncheckNode, this),
      toggleNodeChecked: a.proxy(this.toggleNodeChecked, this),
      disableAll: a.proxy(this.disableAll, this),
      disableNode: a.proxy(this.disableNode, this),
      enableAll: a.proxy(this.enableAll, this),
      enableNode: a.proxy(this.enableNode, this),
      addNode: a.proxy(this.addNode, this),
      setNodeIcon: a.proxy(this.setNodeIcon, this),
      toggleNodeDisabled: a.proxy(this.toggleNodeDisabled, this),
      search: a.proxy(this.search, this),
      clearSearch: a.proxy(this.clearSearch, this)
    }
  };
  g.prototype.init = function (b) {
    this.cacheNode={};
    this.cacheChildContainer={};
    this.nodeStartId=-1;
    this.tree = [], this.nodes = [], b.data && ("string" == typeof b.data && (b.data = a.parseJSON(b.data)), this.tree = a.extend(!0, [], b.data), delete b.data), this.options = a.extend({}, f.settings, b), this.destroy(), this.subscribeEvents(), this.setInitialStates({
      nodes: this.tree
    }, 0), this.render()
  }, g.prototype.remove = function () {
    this.destroy(), a.removeData(this, e), a("#" + this.styleId).remove()
  }, g.prototype.destroy = function () {
    this.initialized && (this.$wrapper.remove(), this.$wrapper = null, this.unsubscribeEvents(), this.initialized = !1)
  }, g.prototype.unsubscribeEvents = function () {
    this.$element.off("click"), this.$element.off("nodeChecked"), this.$element.off("nodeCollapsed"), this.$element.off("nodeDisabled"), this.$element.off("nodeEnabled"), this.$element.off("nodeExpanded"), this.$element.off("nodeSelected"), this.$element.off("nodeUnchecked"), this.$element.off("nodeUnselected"), this.$element.off("searchComplete"), this.$element.off("searchCleared")
  }, g.prototype.subscribeEvents = function () {
    this.unsubscribeEvents(), this.$element.on("click", (e)=>{
        a.proxy(this.clickHandler, this)(e);
    }), "function" == typeof this.options.onNodeChecked && this.$element.on("nodeChecked", this.options.onNodeChecked), "function" == typeof this.options.onNodeCollapsed && this.$element.on("nodeCollapsed", this.options.onNodeCollapsed), "function" == typeof this.options.onNodeDisabled && this.$element.on("nodeDisabled", this.options.onNodeDisabled), "function" == typeof this.options.onNodeEnabled && this.$element.on("nodeEnabled", this.options.onNodeEnabled), "function" == typeof this.options.onNodeExpanded && this.$element.on("nodeExpanded", this.options.onNodeExpanded), "function" == typeof this.options.onNodeSelected && this.$element.on("nodeSelected", this.options.onNodeSelected), "function" == typeof this.options.onNodeUnchecked && this.$element.on("nodeUnchecked", this.options.onNodeUnchecked), "function" == typeof this.options.onNodeUnselected && this.$element.on("nodeUnselected", this.options.onNodeUnselected), "function" == typeof this.options.onSearchComplete && this.$element.on("searchComplete", this.options.onSearchComplete), "function" == typeof this.options.onSearchCleared && this.$element.on("searchCleared", this.options.onSearchCleared)
  }, g.prototype.setInitialStates = function (b, c) {
    if (b.nodes) {
      c += 1;
      var d = b,
        e = this;
      a.each(b.nodes, function (a, b) {
          let blnExits=!!e.nodes[b.nodeId]; 
          if(!blnExits){
            b.nodeId = e.nodes.length;
            b.parentId = d.nodeId;
            e.nodes.push(b);
          }
          b.hasOwnProperty("selectable") || (b.selectable = !0), 
          b.state = b.state || {}, 
          b.state.hasOwnProperty("checked") || (b.state.checked = !1), 
          b.state.hasOwnProperty("disabled") || (b.state.disabled = !1), 
          b.state.hasOwnProperty("expanded") || (!b.state.disabled && c < e.options.levels && b.nodes && b.nodes.length > 0 ? b.state.expanded = !0 : b.state.expanded = !1), 
          b.state.hasOwnProperty("selected") || (b.state.selected = !1), 
          b.nodes && e.setInitialStates(b, c)
      })
    }
  }, g.prototype.clickHandler = function (b) {
    this.options.enableLinks || b.preventDefault();

    var c = a(b.target),
      d = this.findNode(c);
    if (d && !d.state.disabled) {
      var e = c.attr("class") ? c.attr("class").split(" ") : []; 
      - 1 !== e.indexOf("expand-icon") ? (this.toggleExpandedState(d, f.options),this.render(d,this.nodes[d.parentId])) : 
      -1 !== e.indexOf("check-icon") ? (this.toggleCheckedState(d, f.options),this.setChecekIcon(d)) : 
      (d.selectable ? this.toggleSelectedState(d, f.options) : this.toggleExpandedState(d, f.options), this.render(d,this.nodes[d.parentId]))
    }
    if (d && d.state.expanded && !d.blnEndNode) {
      this.options.expandedFinish && this.options.expandedFinish(d);
    }
  }, g.prototype.findNode = function (a) {
    var b = a.closest("li.list-group-item").attr("data-nodeid"),
      c = this.nodes[b];
    return c || console.log("Error: node does not exist"), c
  }, g.prototype.toggleExpandedState = function (a, b) {
    if(a.blnEndNode){return;}
    a && this.setExpandedState(a, !a.state.expanded, b)
  }, g.prototype.setExpandedState = function (b, c, d) {
    c !== b.state.expanded && (c && b.nodes ? (b.state.expanded = !0, d.silent || this.$element.trigger("nodeExpanded", a.extend(!0, {}, b))) : c || (b.state.expanded = !1, d.silent || this.$element.trigger("nodeCollapsed", a.extend(!0, {}, b)), b.nodes && !d.ignoreChildren && a.each(b.nodes, a.proxy(function (a, b) {
      this.setExpandedState(b, !1, d)
    }, this))))
  },
  g.prototype.setChecekIcon=function(b){
    if(b.discheckable){return;}
    let iconEl=this.$element.find(`li[data-nodeid="${b.nodeId}"]`).find('.check-icon');
    if(b.state.checked){
        iconEl.removeClass(this.options.uncheckedIcon);
        iconEl.addClass(this.options.checkedIcon);
    }else{
        iconEl.removeClass(this.options.checkedIcon);
        iconEl.addClass(this.options.uncheckedIcon);
    }
  },
  g.prototype.toggleSelectedState = function (a, b) {
    if(a.blnEndNode) return;
    a && this.setSelectedState(a, !a.state.selected, b)
  }, g.prototype.setSelectedState = function (b, c, d) {
    c !== b.state.selected && (c ? (this.options.multiSelect || a.each(this.findNodes("true", "g", "state.selected"), a.proxy(function (a, b) {
      this.setSelectedState(b, !1, d)
    }, this)), b.state.selected = !0, d.silent || this.$element.trigger("nodeSelected", a.extend(!0, {}, b))) : (b.state.selected = !1, d.silent || this.$element.trigger("nodeUnselected", a.extend(!0, {}, b))))
  }, g.prototype.toggleCheckedState = function (a, b) {
    if(a.discheckable){return;}
    a && this.setCheckedState(a, !a.state.checked, b)
  }, g.prototype.setCheckedState = function (b, c, d) {
    c !== b.state.checked && (c ? (b.state.checked = !0, d.silent || this.$element.trigger("nodeChecked", [a.extend(!0, {}, b), d.data || null])) : (b.state.checked = !1, d.silent || this.$element.trigger("nodeUnchecked", [a.extend(!0, {}, b), d.data || null])))
  }, g.prototype.setDisabledState = function (b, c, d) {
    c !== b.state.disabled && (c ? (b.state.disabled = !0, this.setExpandedState(b, !1, d), this.setSelectedState(b, !1, d), this.setCheckedState(b, !1, d), d.silent || this.$element.trigger("nodeDisabled", a.extend(!0, {}, b))) : (b.state.disabled = !1, d.silent || this.$element.trigger("nodeEnabled", a.extend(!0, {}, b))))
  }, g.prototype.render = function (node,parent) {
    if(!this.initialized){
      this.initialized || (this.$element.addClass(e), this.$wrapper = a(this.template.list), this.injectStyle(), this.initialized = !0),
      this.$element.empty().append(this.$wrapper.empty()), this.buildTree(this.tree, 0)
     }else if(node){
       if(node.blnEndNode){return;}
       let parentElParam=parent && this.$element.find(`li[data-nodeid="${parent.nodeId}"]`);
       //this.addTree(node,parent,parentElParam);
       if(parentElParam){
        let cacheEl=this.cacheChildContainer[parent.nodeId];
        if(!cacheEl){
          let f=a(`<li parentCon='${parent.nodeId}'></li>`);
          parentElParam.after(f);
          cacheEl=f;
          this.cacheChildContainer[parent.nodeId]=f;
        }
        this.addTree(node,parent,cacheEl);
       }else{
        
        this.addTree(node,parent,null);
       }
     }
  },
  g.prototype.addTree=function(node,parent,parentElP){
    let d=this,
        expanded=node.state.expanded,
        id=node.nodeId,
        nodeEl=this.$element.find(`li[data-nodeid="${id}"]`),
        parentEl=parent && (parentElP || this.$element.find(`li[data-nodeid="${parent.nodeId}"]`)),
        nodeExpandEl=nodeEl.find('.expand-icon');
        nodeExpandEl.removeClass();

        let expanIcon=expanded?this.options.collapseIcon:this.options.expandIcon;
        if(node.blnMount && !node.blnEndNode){
          nodeExpandEl.addClass(`icon expand-icon glyphicon ${expanIcon}`);
          let childContainer = this.$element.find(`li[parentcon="${node.nodeId}"]`);
          
          if(node.state.expanded){
            childContainer.css('display','block');
          }else{
            childContainer.css('display','none');
          }
        }else{
          if(parent.state.expanded){
            let e=node;
            e.blnMount=true;
            e._level=parent._level+1;//层级
            for (var f = a(d.template.item)
                        .addClass("node-" + d.elementId)
                        .addClass(e.state.checked ? "node-checked" : "")
                        .addClass(e.state.disabled ? "node-disabled" : "")
                        .addClass(e.state.selected ? "node-selected" : "")
                        .addClass(e.searchResult ? "search-result" : "")
                        .attr('parentId',parent.nodeId)
                        .attr("data-nodeid", e.nodeId)
                        .attr("title",e.text)
                        .attr("style", d.buildStyleOverride(e)), g = 0; parent._level > g; g++) f.append(d.template.indent);
            var h = [];
            if(!node.blnEndNode){
              if (e.nodes ? (h.push("expand-icon"), h.push(e.state.expanded ? d.options.collapseIcon : d.options.expandIcon)) : h.push(d.options.emptyIcon), f.append(a(d.template.icon).addClass(h.join(" "))), d.options.showIcon) {
                  var h = ["node-icon"];
                  h.push(e.icon || d.options.nodeIcon), e.state.selected && (h.pop(), h.push(e.selectedIcon || d.options.selectedIcon || e.icon || d.options.nodeIcon)), f.append(a(d.template.icon).addClass(h.join(" ")))
                
              }
            }
            if (d.options.showCheckbox && !node.discheckable) {
              var h = ["check-icon"];
              h.push(e.state.checked ? d.options.checkedIcon : d.options.uncheckedIcon), f.append(a(d.template.icon).addClass(h.join(" ")))
            }
            f.append(d.options.enableLinks ? a(d.template.link).attr("href", e.href).append(e.text) : e.text); 
            d.options.showTags && e.tags && a.each(e.tags, function (b, c) {
              f.append(a(d.template.badge).append(c))
            });
            
            parentEl.append(f);
            //parentEl.after(f);
          }else{
            let childs=this.$element.find(`li[parentid="${parent.nodeId}"]`);
            childs.css('display','none');
          }
        }

 
        if(node.nodes){
          let parentElParam=this.$element.find(`li[data-nodeid="${node.nodeId}"]`);
          for(var i=0;i<node.nodes.length;i++){
            var child=node.nodes[i];
            if(child.blnMount)continue;
            if(parentElParam){
              let cacheEl=this.cacheChildContainer[node.nodeId];
              if(!cacheEl){
                let fEl=a(`<li parentCon='${node.nodeId}'></li>`);
                parentElParam.after(fEl);
                cacheEl=fEl;
                this.cacheChildContainer[node.nodeId]=fEl;
              }
              d.addTree(child,node,cacheEl);
             }else{
              d.addTree(child,node,parentElParam);
            }
            //d.addTree(child,node,parentElParam);
          }
        }
  },
  g.prototype.buildTree = function (b, c) {
    if (b) {
      c += 1;
      var d = this;
      a.each(b, function (b, e) {
        let ab=null;
        e.blnMount=true;
        e._level=c;//层级
        if(e.nodes && e.nodes.length>0){
          e.state.expanded=true;
        }

   
        for (var f = a(d.template.item).addClass("node-" + d.elementId).addClass(e.state.checked ? "node-checked" : "").addClass(e.state.disabled ? "node-disabled" : "").addClass(e.state.selected ? "node-selected" : "").addClass(e.searchResult ? "search-result" : "").attr("data-nodeid", e.nodeId).attr("style", d.buildStyleOverride(e)), g = 0; c - 1 > g; g++) f.append(d.template.indent);
        var h = [];
        if (e.nodes ? (h.push("expand-icon"), h.push(e.state.expanded ? d.options.collapseIcon : d.options.expandIcon)) : h.push(d.options.emptyIcon), f.append(a(d.template.icon).addClass(h.join(" "))), d.options.showIcon) {
          if(!e.blnEndNode){
            var h = ["node-icon"];
            h.push(e.icon || d.options.nodeIcon), e.state.selected && (h.pop(), h.push(e.selectedIcon || d.options.selectedIcon || e.icon || d.options.nodeIcon)), f.append(a(d.template.icon).addClass(h.join(" ")))
          } 
        }

        if (d.options.showCheckbox && !e.discheckable) {
          var h = ["check-icon"];
          h.push(e.state.checked ? d.options.checkedIcon : d.options.uncheckedIcon), f.append(a(d.template.icon).addClass(h.join(" ")))
        }

        return f.append(d.options.enableLinks ? a(d.template.link).attr("href", e.href).append(e.text) : e.text), d.options.showTags && e.tags && a.each(e.tags, function (b, c) {
          f.append(a(d.template.badge).append(c))
        }),e._level>1?(f.attr('parentId',e._level-2),d.cacheChildContainer[e._level-2].append(f)):d.$wrapper.append(f),
        ab=a(`<li parentCon='${e._level-1}' style='display:${e.state.expanded?'block':'none'};'></li>`),
        (e.nodes && e.nodes.length>0)?e._level>1?f.after(ab):d.$wrapper.append(ab):'',
        (e.nodes && e.nodes.length>0)?d.cacheChildContainer[e._level-1]=ab:'',

        e.nodes && e.state.expanded && !e.state.disabled ? d.buildTree(e.nodes, c) : void 0

        
      })
    }
  }, g.prototype.buildStyleOverride = function (a) {
    if (a.state.disabled) return "";
    var b = a.color,
      c = a.backColor;
    return this.options.highlightSelected && a.state.selected && (this.options.selectedColor && (b = this.options.selectedColor), this.options.selectedBackColor && (c = this.options.selectedBackColor)), this.options.highlightSearchResults && a.searchResult && !a.state.disabled && (this.options.searchResultColor && (b = this.options.searchResultColor), this.options.searchResultBackColor && (c = this.options.searchResultBackColor)), "color:" + b + ";background-color:" + c + ";"
  }, g.prototype.injectStyle = function () {
    this.options.injectStyle && !c.getElementById(this.styleId) && a('<style type="text/css" id="' + this.styleId + '"> ' + this.buildStyle() + " </style>").appendTo("head")
  }, g.prototype.buildStyle = function () {
    var a = ".node-" + this.elementId + "{";
    return this.options.color && (a += "color:" + this.options.color + ";"), this.options.backColor && (a += "background-color:" + this.options.backColor + ";"), this.options.showBorder ? this.options.borderColor && (a += "border:1px solid " + this.options.borderColor + ";") : a += "border:none;", a += "}", this.options.onhoverColor && (a += ".node-" + this.elementId + ":not(.node-disabled):hover{background-color:" + this.options.onhoverColor + ";}"), this.css + a
  }, g.prototype.template = {
    list: '<ul class="list-group"></ul>',
    item: '<li class="list-group-item"></li>',
    indent: '<span class="indent"></span>',
    icon: '<span class="icon"></span>',
    link: '<a href="#" style="color:inherit;"></a>',
    badge: '<span class="badge"></span>'
  }, g.prototype.css = ".treeview .list-group-item{cursor:pointer}.treeview span.indent{margin-left:10px;margin-right:10px}.treeview span.icon{width:12px;margin-right:5px}.treeview .node-disabled{color:silver;cursor:not-allowed}", 
  g.prototype.setNodeIcon = function (b, c) {
    var b = this.identifyNode(b);
    var n = this.nodes[b.nodeId];
    n.icon = c;
    let iconEl=this.$element.find(`li[data-nodeid="${b.nodeId}"]`).find('.node-icon');
    iconEl.removeClass();
    iconEl.addClass(`icon node-icon ${n.icon}`);
    let node=this.identifyNode(b);
    let parent=node.parentId!=undefined?this.identifyNode(node.parentId):undefined;
    this.render(node,parent);
  }, g.prototype.addNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setAddNode(a, b)
    }, this));
    //this.nodes=[];
    this.setInitialStates({
      nodes: this.tree
    }, 0);

    let node=this.identifyNode(b);
    let parent=node.parentId!=undefined?this.identifyNode(node.parentId):undefined;
    this.render(node,parent);
  }, g.prototype.setAddNode = function (b, c) {
    var _toStirng = Object.prototype.toString;
    if (b.nodes == null) b.nodes = [];
    if (c.node) {
      if (_toStirng.call(c.node) == '[object Array]') {
        for (var i = 0; i < c.node.length; i++) {
          b.nodes.push(c.node[i]);
        }
      } else {
        b.nodes.push(c.node);
      }
    }
  }, g.prototype.getNode = function (a) {
    return this.nodes[a]
  }, g.prototype.getParent = function (a) {
    var b = this.identifyNode(a);
    return this.nodes[b.parentId]
  }, g.prototype.getSiblings = function (a) {
    var b = this.identifyNode(a),
      c = this.getParent(b),
      d = c ? c.nodes : this.tree;
    return d.filter(function (a) {
      return a.nodeId !== b.nodeId
    })
  }, g.prototype.getSelected = function () {
    return this.findNodes("true", "g", "state.selected")
  }, g.prototype.getUnselected = function () {
    return this.findNodes("false", "g", "state.selected")
  }, g.prototype.getExpanded = function () {
    return this.findNodes("true", "g", "state.expanded")
  }, g.prototype.getCollapsed = function () {
    return this.findNodes("false", "g", "state.expanded")
  }, g.prototype.getChecked = function () {
    return this.findNodes("true", "g", "state.checked")
  }, g.prototype.getUnchecked = function () {
    return this.findNodes("false", "g", "state.checked")
  }, g.prototype.getDisabled = function () {
    return this.findNodes("true", "g", "state.disabled")
  }, g.prototype.getEnabled = function () {
    return this.findNodes("false", "g", "state.disabled")
  }, g.prototype.selectNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setSelectedState(a, !0, b)
    }, this)), this.render()
  }, g.prototype.unselectNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setSelectedState(a, !1, b)
    }, this)), this.render()
  }, g.prototype.toggleNodeSelected = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.toggleSelectedState(a, b)
    }, this)), this.render()
  }, g.prototype.collapseAll = function (b) {
    var c = this.findNodes("true", "g", "state.expanded");
    this.forEachIdentifier(c, b, a.proxy(function (a, b) {
      this.setExpandedState(a, !1, b)
    }, this)), this.render()
  }, g.prototype.collapseNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setExpandedState(a, !1, b)
    }, this)), this.render()
  }, g.prototype.expandAll = function (b) {
    if (b = a.extend({}, f.options, b), b && b.levels) this.expandLevels(this.tree, b.levels, b);
    else {
      var c = this.findNodes("false", "g", "state.expanded");
      this.forEachIdentifier(c, b, a.proxy(function (a, b) {
        this.setExpandedState(a, !0, b)
      }, this))
    }
    this.render()
  }, g.prototype.expandNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setExpandedState(a, !0, b), a.nodes && b && b.levels && this.expandLevels(a.nodes, b.levels - 1, b)
    }, this)), this.render()
  }, g.prototype.expandLevels = function (b, c, d) {
    d = a.extend({}, f.options, d), a.each(b, a.proxy(function (a, b) {
      this.setExpandedState(b, c > 0 ? !0 : !1, d), b.nodes && this.expandLevels(b.nodes, c - 1, d)
    }, this))
  }, g.prototype.revealNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      for (var c = this.getParent(a); c;) this.setExpandedState(c, !0, b), c = this.getParent(c)
    }, this)), this.render()
  }, g.prototype.toggleNodeExpanded = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.toggleExpandedState(a, b)
    }, this)), this.render()
  }, g.prototype.checkAll = function (b) {
    var c = this.findNodes("false", "g", "state.checked");
    this.forEachIdentifier(c, b, a.proxy(function (a, b) {
      this.setCheckedState(a, !0, b)
    }, this)), this.render()
  }, g.prototype.checkNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setCheckedState(a, !0, b)
    }, this));
    if (!c.noRender) {
      this.render()
    }else{
        let iconEl=this.$element.find(`li[data-nodeid="${b}"]`).find('.check-icon');
        iconEl.removeClass(this.options.uncheckedIcon);
        iconEl.addClass(this.options.checkedIcon);

    }
  }, g.prototype.uncheckAll = function (b) {
    var c = this.findNodes("true", "g", "state.checked"),s=this;
    this.forEachIdentifier(c, b, a.proxy(function (a, b) {
      this.setCheckedState(a, !1, b)
      this.setChecekIcon(a)
      //this.render(a,s.nodes[a.parentId])

    }, this)), this.render()
  }, g.prototype.uncheckNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setCheckedState(a, !1, b)
    }, this));
    if (!c.noRender) {
      this.render()
    }else{
        let iconEl=this.$element.find(`li[data-nodeid="${b}"]`).find('.check-icon');
        iconEl.removeClass(this.options.checkedIcon);
        iconEl.addClass(this.options.uncheckedIcon);
    }
  }, g.prototype.toggleNodeChecked = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.toggleCheckedState(a, b)
    }, this)), this.render()
  }, g.prototype.disableAll = function (b) {
    var c = this.findNodes("false", "g", "state.disabled");
    this.forEachIdentifier(c, b, a.proxy(function (a, b) {
      this.setDisabledState(a, !0, b)
    }, this)), this.render()
  }, g.prototype.disableNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setDisabledState(a, !0, b)
    }, this)), this.render()
  }, g.prototype.enableAll = function (b) {
    var c = this.findNodes("true", "g", "state.disabled");
    this.forEachIdentifier(c, b, a.proxy(function (a, b) {
      this.setDisabledState(a, !1, b)
    }, this)), this.render()
  }, g.prototype.enableNode = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setDisabledState(a, !1, b)
    }, this)), this.render()
  }, g.prototype.toggleNodeDisabled = function (b, c) {
    this.forEachIdentifier(b, c, a.proxy(function (a, b) {
      this.setDisabledState(a, !a.state.disabled, b)
    }, this)), this.render()
  }, g.prototype.forEachIdentifier = function (b, c, d) {
    c = a.extend({}, f.options, c), b instanceof Array || (b = [b]), a.each(b, a.proxy(function (a, b) {
      d(this.identifyNode(b), c)
    }, this))
  }, g.prototype.c_findNodes = function (a, b) {
    return this.findNodes('^' + b.val + '$', a, b.name);
  }, g.prototype.identifyNode = function (a) {
    return "number" == typeof a ? this.nodes[a] : a
  }, g.prototype.search = function (b, c) {
    c = a.extend({}, f.searchOptions, c), this.clearSearch({
      render: !1
    });
    var d = [];
    if (b && b.length > 0) {
      c.exactMatch && (b = "^" + b + "$");
      var e = "g";
      c.ignoreCase && (e += "i"), d = this.findNodes(b, e), a.each(d, function (a, b) {
        b.searchResult = !0
      })
    }
    return c.revealResults ? this.revealNode(d) : this.render(), this.$element.trigger("searchComplete", a.extend(!0, {}, d)), d
  }, g.prototype.clearSearch = function (b) {
    b = a.extend({}, {
      render: !0
    }, b);
    var c = a.each(this.findNodes("true", "g", "searchResult"), function (a, b) {
      b.searchResult = !1
    });
    b.render && this.render(), this.$element.trigger("searchCleared", a.extend(!0, {}, c))
  }, g.prototype.findNodes = function (b, c, d) {
    c = c || "g", d = d || "text";
    var e = this;
    return a.grep(this.nodes, function (a) {
      var f = e.getNodeValue(a, d);
      return "string" == typeof f ? f.match(new RegExp(b, c)) : void 0
    })
  }, g.prototype.findNodesByNode = function (b, c, d, nodes) {
    c = c || "g", d = d || "text";
    var e = this;
    return a.grep(nodes, function (a) {
      var f = e.getNodeValue(a, d);
      return "string" == typeof f ? f.match(new RegExp(b, c)) : void 0
    })
  }, g.prototype.getNodeValue = function (a, b) {
    var c = b.indexOf(".");
    if (c > 0) {
      var e = a[b.substring(0, c)],
        f = b.substring(c + 1, b.length);
      return this.getNodeValue(e, f)
    }
    return a.hasOwnProperty(b) ? a[b].toString() : d
  };
  var h = function (a) {
    b.console && b.console.error(a)
  };
  a.fn[e] = function (b, c) {
    var d;
    return this.each(function () {
      var f = a.data(this, e);
      "string" == typeof b ? f ? a.isFunction(f[b]) && "_" !== b.charAt(0) ? (c instanceof Array || (c = [c]), d = f[b].apply(f, c)) : h("No such method : " + b) : h("Not initialized, can not call method : " + b) : "boolean" == typeof b ? d = f : a.data(this, e, new g(this, a.extend(!0, {}, b)))
    }), d || this
  }
}(jQuery, window, document);
